from frequency_domain import forward_solver


def generate_inverse_crime(forward_builder, mesh, sources, receivers, omega_i, omega_f, n_omegas, output_file):
    omega_size = (omega_f - omega_i) / n_omegas
    omega_midpoint = omega_size / 2
    omega_list = [(omega_i + omega_midpoint) + omega_size * i for i in range(n_omegas)]

    results = []
    for source in sources:
        for omega in omega_list:
            print(f"Generating results for {source.name} @ {omega}...")
            case = forward_builder(source, omega)
            P = forward_solver.solve_2d_helmholtz(case).real
            for receiver in receivers:
                pid = case.mesh.closest_point_id(receiver.original_position)
                results.append((source, omega, receiver, P.ravel()[pid]))

    measured_data_as_str = '\n'.join([
        f"\t\t\t\t('{source.name}', '{receiver.name}', {omega}): {value},"
        for (source, omega, receiver, value) in results
    ]) 
    omega_list_as_str = str(omega_list)
    sources_as_str = '\n'.join([
        f"\t\t\t\tSource('{source.name}', {source.original_position}, {source.expression}),"
        for source in sources
    ])
    receivers_as_str = '\n'.join([
        f"\t\t\t\tReceiver('{receiver.name}', {receiver.original_position}),"
        for receiver in receivers
    ])

    with open(output_file, 'w+') as f:
        f.write(
f'''# this file is automatically generated by generate_fwi_problem.py
# DO NOT EDIT THIS FILE DIRECTLY
#

from frequency_domain.inversion_case import InversionCase
from frequency_domain.mesh_generator import build_2d_quad_mesh
from frequency_domain.experimental_data import ExperimentalData
from frequency_domain.source import Source, ConstantSourceExpression, RickerPulseSourceExpression
from frequency_domain.receiver import Receiver
from frequency_domain.initial_guess import InitialGuess

def build_inversion_case(phi_initial_guess, F0, F1, eta_function, convergence_test_function):
    return InversionCase(
        mesh=build_2d_quad_mesh(
            size_x={mesh.size_x},
            size_y={mesh.size_y},
            nx={mesh.nx},
            ny={mesh.ny}
        ),
        experimental_data=ExperimentalData(
            sources=[
{sources_as_str}],
            receivers=[
{receivers_as_str}],
            omega_list={omega_list_as_str},
            measured_data={{
{measured_data_as_str}
            }}
        ),
        initial_guess=InitialGuess(
            phi=phi_initial_guess,
            F0=F0,
            F1=F1,
        ),
        eta_function=eta_function,
        converged=convergence_test_function,
        omega_i={omega_i},
        omega_f={omega_f},
        n_omegas={n_omegas},
    )''')
    print(f"Successfully written inverse case on file {output_file}!")
